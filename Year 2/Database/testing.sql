SET SERVEROUTPUT on;

CREATE OR REPLACE PROCEDURE addCUST
(custNo IN NUMBER,
custID IN VARCHAR2,
firstName IN VARCHAR2,
lastName IN VARCHAR2,
phoneNumber IN VARCHAR2,
birthDate IN DATE,
driversLicenseNumber IN NUMBER,
status IN VARCHAR2)
IS 
    sql_stmt VARCHAR2(4000);
BEGIN
    sql_stmt := 'INSERT INTO Customer_List(
    CUSTNO, CUSTOMERID, FIRSTNAME, LASTNAME, PHONENUMBER, BIRTHDATE, DRIVERSLICENSENUMBER, STATUS)
    VALUES (:1, :2, :3, :4, :5, :6, :7, :8)' ;
  
    EXECUTE IMMEDIATE sql_stmt USING custNo, custID, firstName, lastName, phoneNumber, birthDate, driversLicenseNumber, status;
    DBMS_OUTPUT.PUT_LINE( 'Customer added successfully!');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE updateCUST(custNo IN NUMBER,colName IN VARCHAR2, newVal  IN VARCHAR2) 
IS
    sql_stmt VARCHAR2(4000);
BEGIN
    sql_stmt := 'UPDATE Customer_List SET ' || colName || ' = :1 WHERE CUSTNO = :2';
    EXECUTE IMMEDIATE sql_stmt USING newVal, custNo;
    DBMS_OUTPUT.PUT_LINE('Customer updated successfully!');
EXCEPTION
    WHEN OTHERS THEN
        
        DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/
CREATE OR REPLACE PROCEDURE deleteCUST(CUSTNO IN NUMBER) 
IS
    sql_stmt VARCHAR2(4000);
BEGIN
    sql_stmt := 'DELETE FROM Customer_List WHERE CUSTNO = :1';
    EXECUTE IMMEDIATE sql_stmt USING CUSTNO;
    DBMS_OUTPUT.PUT_LINE('Customer with CUSTNO ' || CUSTNO || ' deleted successfully!');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
END;
/
COMMIT;/
Drop TABLE DVD_RENTAL;
Drop TABLE CUSTOMER_LIST;
/
CREATE TABLE CUSTOMER_LIST (
    CUSTNO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FIRSTNAME VARCHAR2(20 CHAR),
    LASTNAME VARCHAR2(20 CHAR),
    PHONENUMBER VARCHAR2(20 CHAR),
    BIRTHDATE DATE NOT NULL,
    DRIVERSLICENSENUMBER NUMBER(9) NOT NULL,
    STATUS VARCHAR2(30 CHAR)
);

/
CREATE TABLE Movie_Category(
CategoryID NUMBER NOT NULL,
CategoryName VARCHAR2(30),
CONSTRAINT pk_category PRIMARY KEY (CategoryID)
)
CREATE TABLE DVDS (
TapeID NUMBER NOT NULL,
Title VARCHAR2(50),
Release_Year NUMBER,
Price NUMBER,
CategoryID NUMBER NOT NULL,
RentedOut VARCHAR2(3),
Rating VARCHAR2(6),
ActionOnReturn VARCHAR2(30),
CONSTRAINT pk_tape PRIMARY KEY (TapeID),
CONSTRAINT fk_category FOREIGN KEY (CategoryID)
REFERENCES Movie_Category(CategoryID),
CONSTRAINT CHK_RentedOut CHECK (RentedOUT = 'Yes' OR RentedOut = 'No')
)

CREATE TABLE DVD_RENTAL(
RentalID NUMBER NOT NULL,
RentalDate Date NOT NULL,
CustNo NUMBER NOT NULL,
CustomerID VARCHAR(2) NOT NULL,
TapeID Number NOT NULL,
CONSTRAINT pk_rental_id PRIMARY KEY (RentalID),
CONSTRAINT fk_cust_no_id FOREIGN KEY (CustNo, CustomerID)
REFERENCES Customer_List(Custno, CustomerID),
CONSTRAINT fk_tape FOREIGN KEY (TapeID) REFERENCES DVDS(TapeID)
);/


DECLARE
BEGIN
 
    addCust(1, 'SB', 'Spencer', 'Barnes', '289-259-6490', TO_DATE('12-08-1993', 'MM-DD-YYYY'), 345828222, 'ACTIVE');
    addCust(2, 'JP', 'Jeffrey', 'Pollock', '289-259-6490', TO_DATE('11-04-1995', 'MM-DD-YYYY'), 31231221, 'ACTIVE');
    addCust(3, 'AA', 'Alyafei', 'Ahmed', '289-259-6490', TO_DATE('09-04-2000', 'MM-DD-YYYY'), 31231221, 'INACTIVE');
    
    updateCust(3, 'STATUS', 'ACTIVE');
    deleteCUST(1);

END;/

-- Write an sql query that shows the customer name, dvd name and rental cost in acending order
SELECT c.FirstName + c.LastName AS "Name", d.Title as "Title", d.Price as "Price", DENSE_RANK() OVER (ORDER BY d.Price) AS "Rank"
FROM
CUSTOMER_LIST c
INNER JOIN DVD_RENTAL dr
ON dr.CUSTOMERID = c.CUSTOMERID
INNER JOIN DVDS d
ON d.TAPEID = dr.TAPEID
ORDER BY d.Price ASC NULLS LAST;

SELECT Title, Price, Rank
FROM
(SELECT Title AS Title, Price AS Price, DENSE_RANK() OVER (ORDER BY Price) AS Rank
FROM
DVDS)
WHERE Rank IN (3,4)
ORDER BY Price ASC NULLS LAST;



