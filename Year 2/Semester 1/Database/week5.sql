--Create table Library_Members(
--Member_ID Number Primary Key,
--Member_Name Varchar2(100),
--Membership_Start_Date Date,
--Membership_End_Date Date);
--
--Create Table Events_Attended(
--Event_ID Number Primary Key,
--Event_Date Date,
--Event_Name Varchar2(100),
--Member_ID Number,
--Constraint FK_Member_ID Foreign KEY (Member_ID) REFERENCES LIBRARY_MEMBERS(Member_ID));
--
--
--CREATE OR REPLACE PACKAGE LIBRARY_MANAGEMENT_PKG
--AS
--FUNCTION CALCULATE_MEMBERSHIP_DURATION(P_MEMBER_ID IN NUMBER)
--RETURN NUMBER;
--PROCEDURE REGISTER_EVENT(P_MEMBER_ID IN NUMBER, P_EVENT_NAME IN VARCHAR2, P_EVENT_DATE IN DATE);
--END LIBRARY_MANAGEMENT_PKG;
--
--CREATE SEQUENCE EVENTS_ATTENDED_SEQ
--START with 1
--INCREMENT by 1;
--
--CREATE OR REPLACE PACKAGE BODY LIBRARY_MANAGEMENT_PKG
--AS
--
--FUNCTION CALCULATE_MEMBERSHIP_DURATION(P_MEMBER_ID IN NUMBER)
--RETURN NUMBER
--AS
--Num_Days Number;
--Start_Date Date;
--End_Date Date;
--
--BEGIN
--SELECT Membership_End_Date, Membership_Start_Date INTO End_Date, Start_Date
--FROM Library_Members 
--WHERE Member_ID = P_MEMBER_ID;
--Num_Days := End_Date - Start_Date;
--RETURN Num_Days;
--EXCEPTION
--WHEN NO_DATA_FOUND THEN
--    RAISE_APPLICATION_ERROR(-20001, 'Member_ID not found.');
--END;
--
--PROCEDURE REGISTER_EVENT(P_MEMBER_ID IN NUMBER, P_EVENT_NAME IN VARCHAR2, P_EVENT_DATE IN DATE)
--AS
--ExpiryDate LIBRARY_MEMBERS.MEMBERSHIP_EXPIRY_DATE%TYPE;
--BEGIN
--SELECT MEMBERSHIP_EXPIRY_DATE
--INTO ExpiryDate
--WHERE MEMBER_ID = P_MEMBER_ID;
--IF ExpiryDate < SYSDATE THEN
--    RAISE_APPLICATION_ERROR(-20002,'Membership has expired, Cannot register for the event.');
--END IF;
--INSERT INTO EVENTS_ATTENDED(EVENTS_ATTENDED_SEQ.nextval, P_MEMBER_ID, P_EVENT_NAME,P_EVENT_DATE);
--END;/

Drop TABLE STUDENT_GRADES;
CREATE TABLE STUDENT_GRADES(
COURSE_NO VARCHAR2(20),
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(20),
GRADE NUMBER(3),
STUDENT_NUMBER NUMBER);



select * from STUDENT_GRADES;