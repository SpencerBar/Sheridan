# -*- coding: utf-8 -*-
"""RandomForest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m1AEnGatxaU0IdRbYISnJ7Fom8FTmhij
"""

import pandas as pd
titanic = pd.read_csv('titanic.csv')
titanic.head()

titanic.describe()

"""#Feature Engineering

##Getting rid of columns
"""

titanic.drop(['PassengerId','Ticket','Name'], axis=1, inplace=True)

titanic.head()

titanic.groupby('Survived').describe()

"""##Getting rid of nulls"""

titanic.isnull().sum()

averageAge = titanic['Age'].mean()
titanic['Age'].fillna(averageAge, inplace=True)

titanic.isnull().sum()

# combining sibling and parent count
titanic['FamilySize'] = titanic['SibSp'] + titanic['Parch']
titanic.drop(['SibSp','Parch'], axis=1, inplace=True)

titanic.head()

import numpy as np
titanic['Cabin_indicator'] = np.where(titanic['Cabin'].isnull(), 0, 1)
titanic.drop(['Cabin'], axis=1, inplace=True)
titanic.head()

titanic.drop(['Embarked'], axis=1, inplace=True)

titanic.head()

gender_num = {'male':0, 'female':1}
titanic['Sex'] = titanic['Sex'].map(gender_num)
titanic.head()

titanic.corr()

import seaborn as sns
sns.heatmap(titanic.corr())

features = titanic.drop(['Survived'], axis=1)
labels = titanic['Survived']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV

rfc = RandomForestClassifier()
parameters = {
    'n_estimators': [5,20,40,80,100],
    'max_depth': [2,3,4,5,None],
    'min_samples_split': [2,3,4,5],
    'criterion': ['entropy', 'gini','log_loss']
}

cv = GridSearchCV(rfc, parameters)
cv.fit(X_train, y_train)

bestModel = cv.best_estimator_

print(cv.best_params_)

means = cv.cv_results_['mean_test_score']
stds = cv.cv_results_['std_test_score']
for mean, std, params in zip(means, stds, cv.cv_results_['params']):
    print('{} (+/- {} for  {}'.format(round(mean, 3), round(std * 2, 3), params))

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
cm = cv.best_estimator_.predict(X_test)
sns.heatmap(confusion_matrix(y_test, cm), annot=True)
plt.xlabel('Predicted')
plt.ylabel('Actual')